{"version":3,"sources":["Components/Cell/Cell.js","Components/Board/Board.js","Components/Collection/Collection.js","Components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","BOARD_SIZE","board","show","id","image","active","turnCard","styles","width","height","margin","backgroundColor","imageStyles","className","style","onClick","src","alt","Board","images","border","display","gridTemplate","cells","i","push","Collection","collected","length","Game","collectedPlayer1","collectedPlayer2","useState","Array","fill","setShow","player1Turn","setPlayer1Turn","justifyContent","marginTop","turnedCards","prev","slice","App","newIndex","Math","floor","random","temp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b8cde66.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function Cell({BOARD_SIZE, board, show, id, image, active, turnCard}) {\r\n\r\n   const styles = {\r\n        width: 0.9 * (600 / BOARD_SIZE),\r\n        height: 0.9 * (600 / BOARD_SIZE),\r\n        margin: 0.05 * (600 / BOARD_SIZE),\r\n        backgroundColor: board && active ? 'grey' : 'white'\r\n    }\r\n\r\n    const imageStyles = {\r\n        width: '100%',\r\n        height: '100%'\r\n    }\r\n\r\n    function handleClick() {\r\n        board && active && turnCard(id);\r\n    }\r\n\r\n    return (\r\n        <div className='Cell' style={styles} onClick={handleClick}>\r\n            {board && show && <img src={image + '.jpg'} style={imageStyles} alt='' />}\r\n            {!board && <img src={image + '.jpg'} style={imageStyles} alt='' />}\r\n   \r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Cell} from '../Cell/Cell'\r\n\r\nexport function Board({BOARD_SIZE, images, show, active, turnCard}) {\r\n    \r\n    const styles = {\r\n        width: 600,\r\n        height: 600,\r\n        border: '1px solid black',\r\n        display: 'grid',\r\n        gridTemplate: `repeat(${BOARD_SIZE}, 1fr) / repeat(${BOARD_SIZE}, 1fr)`}\r\n\r\n    const cells = [];\r\n    for (let i = 0; i < BOARD_SIZE ** 2; i++) {\r\n        cells.push(<Cell key={i} id={i} image={images[i]} BOARD_SIZE={BOARD_SIZE} board={true} active={active[i]} show={show[i]} turnCard={turnCard}/>)\r\n    }\r\n\r\n    return (\r\n        <div className='Board' style={styles}>\r\n            {cells}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Cell} from '../Cell/Cell'\r\n\r\nexport function Collection({BOARD_SIZE, collected}) {\r\n\r\n    const styles = {\r\n        width: 300,\r\n        height: 600,\r\n        border: '1px solid black',\r\n        display: 'grid',\r\n        gridTemplate: `repeat(${BOARD_SIZE}, 1fr) / repeat(${BOARD_SIZE / 2}, 1fr)`}\r\n\r\n    const cells = [];\r\n    for (let i = 0; i < collected.length; i++) {\r\n        cells.push(<Cell key={i} BOARD_SIZE={BOARD_SIZE} board={false} image={collected[i]}/>)\r\n    }\r\n\r\n    return (\r\n        <div className='Board' style={styles}>\r\n            {cells}\r\n         </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport {Board} from '../Board/Board';\r\nimport {Collection} from '../Collection/Collection';\r\n\r\nexport function Game({BOARD_SIZE, images, active, collectedPlayer1, collectedPlayer2}) {\r\n\r\n  const styles = {\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    marginTop: 50\r\n  }\r\n\r\n  const [show, setShow] = useState(new Array(BOARD_SIZE ** 2).fill(false));\r\n  const [player1Turn, setPlayer1Turn] = useState(true);\r\n\r\n  function turnCard(id) {\r\n\r\n    let turnedCards = [];\r\n    for (let i = 0; i < show.length; i++) {\r\n        if (show[i]) {\r\n            turnedCards.push(i);\r\n        }\r\n    }\r\n\r\n    if (turnedCards.length < 2) {\r\n        setShow(prev => ([\r\n            ...prev.slice(0, id),\r\n            true,\r\n            ...prev.slice(id + 1, prev.length)\r\n          ]))\r\n     }\r\n\r\n     else {\r\n         if (images[turnedCards[0]] === images[turnedCards[1]]) {\r\n             active[turnedCards[0]] = false;\r\n             active[turnedCards[1]] = false;\r\n             if (player1Turn) {\r\n                collectedPlayer1.push(images[turnedCards[0]])\r\n             }\r\n             else {\r\n                collectedPlayer2.push(images[turnedCards[0]])\r\n             }\r\n         }\r\n\r\n         setShow(prev => prev.fill(false));\r\n         setPlayer1Turn(!player1Turn);\r\n     }\r\n }\r\n\r\n  return (\r\n    <div className=\"Game\" style={styles}>\r\n      <Collection BOARD_SIZE={BOARD_SIZE} collected={collectedPlayer1}/>\r\n      <Board BOARD_SIZE={BOARD_SIZE} images={images} show={show} turnCard={turnCard} active={active}/>\r\n      <Collection BOARD_SIZE={BOARD_SIZE} collected={collectedPlayer2}/>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\nimport React from 'react';\nimport {Game} from './Components/Game/Game';\n\nfunction App() {\n\n  const BOARD_SIZE = 4;\n  const images = [];\n  const active = new Array(BOARD_SIZE ** 2).fill(true);\n  const collectedPlayer1 = [];\n  const collectedPlayer2 = [];\n \n  //Initialize an array holding the image identifiers\n    for (let i = 1; i <= BOARD_SIZE ** 2 / 2; i++) {\n      images.push(i)\n      images.push(i)\n    }\n\n    //Shuffle the image identifiers\n    for (let i = 0; i < BOARD_SIZE ** 2; i++) {\n      let newIndex = Math.floor(Math.random() * BOARD_SIZE ** 2);\n      let temp = images[i];\n      images[i] = images[newIndex];\n      images[newIndex] = temp;\n    }\n\n    \n\n  return (\n    <div className=\"App\">\n      <Game BOARD_SIZE={BOARD_SIZE} images={images} active={active} collectedPlayer1={collectedPlayer1} collectedPlayer2={collectedPlayer2}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}