{"version":3,"sources":["Components/Cell/Cell.js","Components/Board/Board.js","Components/Collection/Collection.js","Components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","BOARD_SIZE","board","show","id","image","active","clickable","turnCard","styles","width","height","margin","backgroundColor","imageStylesShow","opacity","transitionProperty","transitionDuration","className","style","onClick","src","alt","Board","images","player1Turn","playerWins","boardStyles","border","display","gridTemplate","cells","i","push","textAlign","Collection","collected","player","length","Game","collectedPlayer1","collectedPlayer2","useState","Array","fill","setShow","setClickable","setPlayer1Turn","justifyContent","turnedCards","includes","prev","slice","setTimeout","every","el","App","SET_BOARD_SIZE","rand","Math","floor","random","newIndex","temp","changeBoardSize","e","Number","target","value","type","name","checked","htmlFor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7453a3f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function Cell({BOARD_SIZE, board, show, id, image, active, clickable, turnCard}) {\r\n\r\n   const styles = {\r\n        width: 0.9 * (600 / BOARD_SIZE),\r\n        height: 0.9 * (600 / BOARD_SIZE),\r\n        margin: 0.05 * (600 / BOARD_SIZE),\r\n        backgroundColor: board && active ? 'grey' : 'white'\r\n    }\r\n\r\n    const imageStylesHide = {\r\n        width: '100%',\r\n        height: '100%',\r\n        opacity: 0,\r\n        transitionProperty: 'opacity',\r\n        transitionDuration: '1s'\r\n    }\r\n\r\n    const imageStylesShow = {\r\n        width: '100%',\r\n        height: '100%',\r\n        opacity: 100,\r\n        transitionProperty: 'opacity',\r\n        transitionDuration: '1s'\r\n    }\r\n\r\n    function handleClick() {\r\n        board && active && clickable && turnCard(id);\r\n    }\r\n\r\n    return (\r\n        <div className='Cell' style={styles} onClick={handleClick}>\r\n            {board && <img src={image + '.jpg'} style={show ? imageStylesShow : imageStylesHide} alt='' />}\r\n            {!board && <img src={image + '.jpg'} style={imageStylesShow} alt='' />}\r\n   \r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Cell} from '../Cell/Cell'\r\n\r\nexport function Board({BOARD_SIZE, images, show, active, clickable, turnCard, player1Turn, playerWins}) {\r\n\r\n    const textStyles = {\r\n        textAlign: 'center'\r\n    }\r\n    \r\n    const boardStyles = {\r\n        width: 600,\r\n        height: 600,\r\n        border: '1px solid black',\r\n        display: 'grid',\r\n        gridTemplate: `repeat(${BOARD_SIZE}, 1fr) / repeat(${BOARD_SIZE}, 1fr)`,\r\n    }\r\n\r\n    const cells = [];\r\n    for (let i = 0; i < BOARD_SIZE ** 2; i++) {\r\n        cells.push(<Cell key={i} id={i} image={images[i]} BOARD_SIZE={BOARD_SIZE} board={true} active={active[i]} clickable={clickable} show={show[i]} turnCard={turnCard}/>)\r\n    }\r\n\r\n    return (\r\n        <div style={textStyles}>\r\n            {playerWins() ? <h2>Player {playerWins()} wins!</h2> : <h2>Player {player1Turn ? '1' : '2'}'s turn</h2>}\r\n          <div className='Board' style={boardStyles}>\r\n              {cells}\r\n            </div>\r\n        </div>\r\n     );\r\n}","import React from 'react';\r\nimport {Cell} from '../Cell/Cell'\r\n\r\nexport function Collection({BOARD_SIZE, collected, player}) {\r\n\r\n    const textStyles = {\r\n        textAlign: 'center'\r\n    }\r\n\r\n    const boardStyles = {\r\n        width: 300,\r\n        height: 600,\r\n        border: '1px solid black',\r\n        display: 'grid',\r\n        gridTemplate: `repeat(${BOARD_SIZE}, 1fr) / repeat(${BOARD_SIZE / 2}, 1fr)`}\r\n\r\n    const cells = [];\r\n    for (let i = 0; i < collected.length; i++) {\r\n        cells.push(<Cell key={i} BOARD_SIZE={BOARD_SIZE} board={false} image={collected[i]}/>)\r\n    }\r\n\r\n    return (\r\n        <div style={textStyles}>\r\n            <h2>Player {player}</h2>\r\n            <div className='Board' style={boardStyles}>\r\n                {cells}\r\n            </div>\r\n        </div>\r\n      );\r\n}","import React, {useState} from 'react';\r\nimport {Board} from '../Board/Board';\r\nimport {Collection} from '../Collection/Collection';\r\n\r\nexport function Game({BOARD_SIZE, images, active, collectedPlayer1, collectedPlayer2}) {\r\n\r\n  const styles = {\r\n    display: 'flex',\r\n    justifyContent: 'space-around'\r\n  }\r\n\r\n  const [show, setShow] = useState(new Array(64).fill(false));    //Tells whether the cards are shown\r\n  const [clickable, setClickable] = useState(true);               //Tells whether the cards are clickable\r\n  const [player1Turn, setPlayer1Turn] = useState(true);           //Tells whose turn it is\r\n\r\n  function turnCard(id) {\r\n\r\n    //Assess how many cards are currently showing\r\n    let turnedCards = [];\r\n    for (let i = 0; i < show.length; i++) {\r\n        if (show[i]) {\r\n            turnedCards.push(i);\r\n        }\r\n    }\r\n\r\n    //If less than two cards are showing and the clicked card is not already showing, show the clicked card and push it onto the array with cards currently showing\r\n    if (turnedCards.length < 2 && !turnedCards.includes(id)) {\r\n        setShow(prev => ([\r\n            ...prev.slice(0, id),\r\n            true,\r\n            ...prev.slice(id + 1, prev.length)\r\n        ]))\r\n        turnedCards.push(id); \r\n\r\n     }\r\n\r\n    //If two cards are showing\r\n    if (turnedCards.length === 2) {\r\n\r\n      //Temporarily disable possibility to click cards\r\n      setClickable(false);\r\n\r\n      //Show the cards for two seconds. Then, if both cards have the same image, inactivate the cards and push them onto the current player's collection\r\n      setTimeout(() => {\r\n        if (turnedCards[0] !== turnedCards[1] && images[turnedCards[0]] === images[turnedCards[1]]) {\r\n          active[turnedCards[0]] = false;\r\n          active[turnedCards[1]] = false;\r\n          if (player1Turn) {\r\n            collectedPlayer1.push(images[turnedCards[0]])\r\n          }\r\n          else {\r\n            collectedPlayer2.push(images[turnedCards[0]])\r\n          }\r\n       }\r\n\r\n       //If both cards do not have the same image, switch turns\r\n       else {\r\n        setPlayer1Turn(!player1Turn);\r\n       }\r\n\r\n       //Unshow all cards\r\n        setShow(prev => prev.fill(false));\r\n\r\n       //Re-enable possibility to click cards\r\n        setClickable(true);\r\n      }, 2000)\r\n    }\r\n  }\r\n\r\n  //Check whether all cards have been collected and assess which player has won\r\n  function playerWins() {\r\n      if (active.every(el => el === false) && collectedPlayer1.length > collectedPlayer2.length) {\r\n        return 1;\r\n      }\r\n      else if (active.every(el => el === false) && collectedPlayer1.length < collectedPlayer2.length) {\r\n         return 2;\r\n      }\r\n      else if (active.every(el => el === false)) {\r\n          return player1Turn ? 1 : 2;\r\n      }\r\n      else {\r\n         return 0;\r\n      }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Game\" style={styles}>\r\n       <Collection BOARD_SIZE={BOARD_SIZE} collected={collectedPlayer1} player={1}/>\r\n      <Board BOARD_SIZE={BOARD_SIZE} images={images} show={show} turnCard={turnCard} active={active} clickable={clickable} player1Turn={player1Turn} playerWins={playerWins}/>\r\n      <Collection BOARD_SIZE={BOARD_SIZE} collected={collectedPlayer2} player={2}/>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Game} from './Components/Game/Game';\r\n\r\nfunction App() {\r\n\r\n  const [BOARD_SIZE, SET_BOARD_SIZE] = useState(6);       //Indicates the size of the side of the board\r\n  const images = [];                                      //Holds the image identifier for each cell\r\n  const active = new Array(BOARD_SIZE ** 2).fill(true);   //Tells whether the cell is active\r\n  const collectedPlayer1 = [];                            //Holds the image identifiers of the collected cards by player 1\r\n  const collectedPlayer2 = [];                            //Holds the image identifiers of the collected cards by player 2\r\n\r\n  const styles = {\r\n    margin: 20,\r\n    textAlign: 'center'\r\n  }\r\n \r\n  //Initialize an array holding the image identifiers\r\n  for (let i = 0; i < BOARD_SIZE ** 2 / 2; i++) {\r\n    let rand;\r\n    do {\r\n      rand = Math.floor(Math.random() * 32 + 1);\r\n    } while (images.includes(rand))\r\n      images.push(rand)\r\n      images.push(rand)\r\n  }\r\n\r\n  //Shuffle the image identifiers\r\n  for (let i = 0; i < BOARD_SIZE ** 2; i++) {\r\n      let newIndex = Math.floor(Math.random() * BOARD_SIZE ** 2);\r\n      let temp = images[i];\r\n      images[i] = images[newIndex];\r\n      images[newIndex] = temp;\r\n  }\r\n\r\n  //Change board size\r\n  function changeBoardSize(e) {\r\n    SET_BOARD_SIZE(prev => Number(e.target.value));\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Game BOARD_SIZE={BOARD_SIZE} images={images} active={active} collectedPlayer1={collectedPlayer1} collectedPlayer2={collectedPlayer2}/>\r\n      <div className='Level' style={styles}>\r\n        <input type='radio' id='easy' value='4' name='level' onClick={changeBoardSize} checked={BOARD_SIZE === 4}></input>\r\n        <label htmlFor='easy'>Easy</label>\r\n        <input type='radio' id='medium' value='6' name='level' onClick={changeBoardSize} checked={BOARD_SIZE === 6}></input>\r\n        <label htmlFor='hard'>Medium</label>\r\n        <input type='radio' id='official' value='8' name='level' onClick={changeBoardSize} checked={BOARD_SIZE === 8}></input>\r\n        <label htmlFor='hard'>Official</label>\r\n      </div>\r\n     </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}