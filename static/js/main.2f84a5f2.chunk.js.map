{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","currentPlaylistTracks","push","filter","el","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f84a5f2.chunk.js","sourcesContent":["let accessToken;\r\n\r\nconst clientId = 'fc44535f1ff243f98d9004019fa88d9b';\r\nconst redirectUri = 'http://localhost:3000/';\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n        \r\n        let accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        let expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {'Authorization': 'Bearer ' + accessToken}\r\n        })\r\n            .then(response => response.json())\r\n            .then(jsonResponse => {\r\n                if (!jsonResponse.tracks) {\r\n                    return [];\r\n                }\r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }))\r\n            })\r\n    },\r\n\r\n    savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {\r\n            'Authorization': 'Bearer ' + accessToken\r\n        }\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', {\r\n            headers: headers\r\n        })\r\n        .then(response => response.json())\r\n        .then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({name: name})\r\n            })\r\n            .then(response => response.json())\r\n            .then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({uris: trackUris})\r\n                })\r\n                \r\n            })\r\n        });\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value});\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n                <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button onClick={this.removeTrack} className='Track-action'>-</button>\r\n        } else {\r\n            return <button onClick={this.addTrack} className='Track-action'>+</button>\r\n        }\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n     render() {\r\n        return(\r\n            <div className=\"TrackList\">\r\n            {\r\n                 this.props.tracks.map(track => {\r\n                    return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval}/>;\r\n                })\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList'\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\r\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\r\n                <button onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let currentPlaylistTracks = this.state.playlistTracks;\n    for (let t of currentPlaylistTracks)\n      if (t.id === track.id)\n        return;\n    currentPlaylistTracks.push(track);\n    this.setState({playlistTracks: currentPlaylistTracks});\n }\n\n removeTrack(track) {\n   let currentPlaylistTracks = this.state.playlistTracks;\n   currentPlaylistTracks = currentPlaylistTracks.filter(el => el.id !== track.id);\n   this.setState({playlistTracks: currentPlaylistTracks});\n }\n\n updatePlaylistName(name) {\n   this.setState({playlistName: name})\n }\n\n savePlaylist() {\n   const trackUris = this.state.playlistTracks.map(track => track.uri);\n   Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n     this.setState({\n       playlistName: 'New Playlist',\n       playlistTracks: []\n     })\n   })\n }\n\n search(term) {\n   Spotify.search(term).then(results => this.setState({searchResults: results}));\n }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} onNameChange={this.updatePlaylistName} onRemove={this.removeTrack} onSave={this.savePlaylist}/>\n          </div>\n        </div>\n    </div>\n      \n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}