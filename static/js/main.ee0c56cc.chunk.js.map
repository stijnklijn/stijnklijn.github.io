{"version":3,"sources":["Components/ActiRanker/ActiRanker.js","Util/Strava.js","App.js","reportWebVitals.js","index.js"],"names":["ActiRanker","activities","getActivities","sortBy","variables","useState","sortVariable","setSortVariable","sortDescending","setSortDescending","convertTime","time","hours","Math","floor","remainingTime","minutes","seconds","toString","padStart","className","onClick","htmlFor","id","name","onChange","e","target","value","map","variable","type","act","date","substring","dist","toFixed","elev","kudos","comm","speedAvg","speedMax","powerAvg","powerWghtd","powerMax","HRAvg","HRMax","accessToken","clientId","Strava","getAuthorizationCode","authorizationCodeMatch","window","location","href","match","authorizationsMatch","authorizationCode","split","getAccessToken","fetch","method","response","json","jsonResponse","access_token","getNumberOfActivities","headers","Authorization","all_ride_totals","count","all_run_totals","all_swim_totals","page","start_date_local","distance","moving_time","total_elevation_gain","kudos_count","comment_count","average_speed","max_speed","average_watts","weighted_average_watts","max_watts","average_heartrate","max_heartrate","App","setActivities","a","numberOfActivities","promises","push","Promise","all","flat","prev","sort","b","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee0c56cc.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nexport function ActiRanker({activities, getActivities, sortBy}) {\r\n\r\n    let variables = ['date', 'name', 'dist', 'time', 'elev', 'kudos', 'comm', 'speedAvg', 'speedMax',\r\n    'powerAvg', 'powerWghtd', 'powerMax', 'HRAvg', 'HRMax']\r\n\r\n    const [sortVariable, setSortVariable] = useState('date');\r\n    const [sortDescending, setSortDescending] = useState(true);\r\n\r\n    function convertTime(time) {\r\n        let hours = Math.floor(time / 3600);\r\n        let remainingTime = time % 3600;\r\n        let minutes = Math.floor(remainingTime / 60);\r\n        let seconds = remainingTime % 60;\r\n        return hours.toString().padStart(2, '0') + ':' + minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');\r\n    }\r\n\r\n    function handleSortRequest() {\r\n        sortBy(sortVariable, sortDescending);\r\n    }\r\n\r\n    return(\r\n        <div className='Actiranker'>\r\n            <div className='Inputarea'>\r\n                <button onClick={getActivities}>Import activities</button>\r\n                <label htmlFor='sortby'>Sort by: </label>\r\n                <select id='sortby' name='variables' onChange={e => {setSortVariable(e.target.value)}}>\r\n                    {variables.map(variable => {\r\n                        return <option key={variable} value={variable}>{variable}</option>\r\n                    })}\r\n                </select>\r\n                <input type='radio' name='order' id='descending' onChange={e => {setSortDescending(true)}}/>\r\n                <label htmlFor='descending'>Descending</label>\r\n                <input type='radio' name='order' id='ascending' onChange={e => {setSortDescending(false)}} />\r\n                <label htmlFor='ascending'>Ascending</label>\r\n                <button onClick={handleSortRequest}>Sort</button>\r\n            </div>\r\n             <table>\r\n                <thead>\r\n                <tr>\r\n                    {variables.map(variable => {\r\n                        return <td key={variable}>{variable}</td>\r\n                    })}\r\n                </tr>\r\n                </thead>\r\n            <tbody>\r\n            {activities.map(act => {\r\n                return (\r\n                <tr key={act.id}>\r\n                            <td>{act.date.substring(8, 10) + '-' + act.date.substring(5, 7) + '-' + act.date.substring(0,4)}</td>\r\n                            <td className='left'>{act.name}</td>\r\n                            <td>{(act.dist / 1000).toFixed(0)}</td>\r\n                            <td>{convertTime(act.time)}</td>\r\n                            <td>{act.elev.toFixed(0)}</td>\r\n                            <td>{act.kudos}</td>\r\n                            <td>{act.comm}</td>\r\n                            <td>{(act.speedAvg * 3.6).toFixed(2)}</td>\r\n                            <td>{(act.speedMax * 3.6).toFixed(2)}</td>\r\n                            <td>{act.powerAvg ? act.powerAvg.toFixed(0) : '-'}</td>\r\n                            <td>{act.powerWghtd ? act.powerWghtd.toFixed(0): '-'}</td>\r\n                            <td>{act.powerMax ? act.powerMax.toFixed(0) : '-'}</td>\r\n                            <td>{act.HRAvg ? act.HRAvg.toFixed(0) : '-'}</td>\r\n                            <td>{act.HRMax ? act.HRMax.toFixed(0) : '-'}</td>\r\n                            </tr>\r\n                 );\r\n            })}\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n    );\r\n}","//Als toegang door de gebruiker geweigerd wordt bij getAuthorizationCode(), zit 'error=access_denied' in de string. Dit nog verwerken.\r\n\r\nimport { ActiRanker } from \"../Components/ActiRanker/ActiRanker\";\r\n\r\n\r\n//De token verloopt na 6 uur. Eventueel nog een functie maken die een nieuwe token aanvraagt met behulp van de refresh token.\r\n\r\n//If you need to make a request, we recommend checking to see if the short-lived access token has expired.\r\n//If it has expired, request a new short-lived access token with the last received refresh token.\r\n\r\n//Moet gebruik maken van Webhooks?\r\n\r\n\r\nconst clientId = '67032';\r\nconst clientSecret = '18fb4c9185552d4ba2fedd31e4deabe5209360a2';\r\nconst redirectUri = 'https://stijnklijn.github.io';\r\nlet authorizations;\r\nlet accessToken;\r\n\r\nexport const Strava = {\r\n\r\n    getAuthorizationCode() {\r\n\r\n        let authorizationCodeMatch = window.location.href.match(/code=([^&]*)/);\r\n        let authorizationsMatch = window.location.href.match(/scope=([^&]*)/);\r\n\r\n        if (authorizationCodeMatch && authorizationsMatch) {\r\n            let authorizationCode = authorizationCodeMatch[1];\r\n            authorizations = authorizationsMatch[1].split(',');\r\n            return authorizationCode;\r\n        }\r\n\r\n        else {\r\n            window.location = `https://www.strava.com/oauth/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirectUri}&approval_prompt=force&scope=read,read_all,profile:read_all,activity:read,activity:read_all`;\r\n         }\r\n    },\r\n\r\n    async getAccessToken() {\r\n\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        let authorizationCode = this.getAuthorizationCode();\r\n        let response = await fetch(`https://www.strava.com/oauth/token?client_id=${clientId}&client_secret=${clientSecret}&code=${authorizationCode}&grant_type=authorization_code`, {\r\n            method: 'POST'\r\n        })\r\n        let jsonResponse = await response.json();\r\n        accessToken = jsonResponse.access_token\r\n        return accessToken;\r\n     },\r\n\r\n    async getNumberOfActivities() {\r\n\r\n        let accessToken = await this.getAccessToken();\r\n        let response = await fetch(`https://www.strava.com/api/v3/athlete`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        })\r\n        let jsonResponse = await response.json();\r\n        let id = jsonResponse.id;\r\n\r\n        response = await fetch(`https://www.strava.com/api/v3/athletes/${id}/stats`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        })\r\n        jsonResponse = await response.json();\r\n        return jsonResponse.all_ride_totals.count + jsonResponse.all_run_totals.count + jsonResponse.all_swim_totals.count;\r\n      \r\n\r\n\r\n\r\n    },\r\n\r\n    \r\n    async getActivities(page) {\r\n\r\n        //Incorporate check for read and read_all\r\n \r\n     \r\n        let accessToken = await this.getAccessToken();\r\n        let response = await fetch(`https://www.strava.com/api/v3/athlete/activities?page=${page}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        })\r\n        let jsonResponse = await response.json();\r\n        return jsonResponse.map(act => ({\r\n            id: act.id,\r\n            date: act.start_date_local,\r\n            name: act.name,\r\n            dist: act.distance,\r\n            time: act.moving_time,\r\n            elev: act.total_elevation_gain,\r\n            kudos: act.kudos_count,\r\n            comm: act.comment_count,\r\n            speedAvg: act.average_speed,\r\n            speedMax: act.max_speed,\r\n            powerAvg: act.average_watts || 0,\r\n            powerWghtd: act.weighted_average_watts || 0,\r\n            powerMax: act.max_watts || 0,\r\n            HRAvg: act.average_heartrate || 0,\r\n            HRMax: act.max_heartrate || 0\r\n        }))\r\n    }\r\n    \r\n}","import './App.css';\nimport {useState} from 'react';\nimport {Strava} from './Util/Strava'\nimport {ActiRanker} from './Components/ActiRanker/ActiRanker'\n\nfunction App() {\n\n  const [activities, setActivities] = useState([]);\n\n  async function getActivities() {\n    let numberOfActivities = await Strava.getNumberOfActivities();\n    let promises = [];\n    for (let page = 1; page < numberOfActivities / 30 + 1; page++) {          //Wijzigen naar page < numberOfActivities / 30 + 1\n        promises.push(Strava.getActivities(page));\n    }\n\n    let activities = await Promise.all(promises);\n    setActivities(activities.flat())\n  }\n\n  function sortBy(variable, sortDescending) {\n    setActivities(prev => [...prev.sort((a, b) => {\n      if (a[variable] > b[variable]) {\n        return sortDescending ? -1 : 1;\n      }\n      else if (a[variable] < b[variable]) {\n        return sortDescending ? 1 : -1;\n      }\n      else {\n        return 0;\n      }\n    })]);\n    \n   }\n\n  return (\n    <div className='App'>\n      <ActiRanker activities={activities} getActivities={getActivities} sortBy={sortBy}/> \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}